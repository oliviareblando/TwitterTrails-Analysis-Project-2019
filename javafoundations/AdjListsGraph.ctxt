#BlueJ class context
comment0.target=AdjListsGraph
comment0.text=\n\ Implements\ the\ Graph\ interface.\ \n\n\ @author\ Anushe\ Sheikh\ &\ Olivia\ Reblando\n\ @version\ 12/7/19\n
comment1.params=
comment1.target=AdjListsGraph()
comment1.text=\ \n\ Constructor\ \n
comment10.params=vertex1\ vertex2
comment10.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment10.text=\ \n\ Determines\ if\ an\ edge\ exists\ between\ the\ vertex1\ and\ vertex2,\ eg.\n\ an\ arc\ exists\ from\ vertex1\ and\ vertex2,\ and\ an\ arc\ exists\ from\ \n\ vertex2\ to\ vertex1.\n\ \ \n\ @return\ true\ or\ false\n
comment11.params=
comment11.target=boolean\ isUndirected()
comment11.text=\ \n\ Returns\ true\ if\ the\ graph\ is\ undirected,\ that\ is,\ for\ every\n\ pair\ of\ nodes\ i,j\ for\ which\ there\ is\ an\ arc,\ the\ opposite\ arc\n\ is\ also\ present\ in\ the\ graph,\ false\ otherwise.\ \ \n\ \n\ @return\ true\ if\ the\ graph\ is\ undirected,\ false\ otherwise\n
comment12.params=vertex
comment12.target=void\ addVertex(java.lang.Object)
comment12.text=\ \n\ Adds\ the\ given\ vertex\ to\ this\ graph.\ If\ the\ given\ vertex\ already\n\ exists,\ the\ graph\ does\ not\ change\n\ \n\ @param\ vertex\ \n
comment13.params=vertex
comment13.target=void\ removeVertex(java.lang.Object)
comment13.text=\ \n\ Removes\ the\ given\ vertex\ from\ this\ graph.\ If\ the\ given\ vertex\ \n\ does\ not\ exist,\ the\ graph\ does\ not\ change.\n\ \n\ @param\ vertex\n
comment14.params=vertex1\ vertex2
comment14.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment14.text=\ \n\ Inserts\ an\ arc\ between\ two\ given\ vertices\ of\ this\ graph.\n\ If\ at\ least\ one\ of\ the\ vertices\ does\ not\ exist,\ the\ graph\ \n\ is\ not\ changed.\n\ \n\ @param\ vertex1\ -\ the\ origin\ of\ new\ arc,\ vertex2\ -\ the\ \n\ \ \ \ \ \ \ \ destination\ of\ new\ arc\n
comment15.params=vertex1\ vertex2
comment15.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment15.text=\ \n\ Removes\ the\ arc\ between\ two\ given\ vertices\ of\ this\ graph.\n\ If\ one\ of\ the\ two\ vertices\ does\ not\ exist\ in\ the\ graph,\n\ the\ graph\ does\ not\ change.\n\ \n\ @param\ the\ origin\ of\ the\ arc\ to\ be\ removed\ from\ this\ graph\n\ @param\ the\ destination\ of\ the\ arc\ to\ be\ removed\ from\ this\ graph\n\ \n
comment16.params=vertex1\ vertex2
comment16.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment16.text=\ \n\ Inserts\ the\ edge\ between\ the\ two\ given\ vertices\ of\ this\ graph,\n\ if\ both\ vertices\ exist\ and\ edge\ does\ not\ already\ exist,\n\ else\ the\ graph\ is\ not\ changed.\n\ \n\ @param\ the\ origin\ of\ the\ edge\ to\ be\ added\ to\ this\ graph\n\ @param\ the\ destination\ of\ the\ edge\ to\ be\ added\ to\ this\ graph\n\ \n
comment17.params=vertex1\ vertex2
comment17.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment17.text=\ \n\ Removes\ the\ edge\ between\ the\ two\ given\ vertices\ of\ this\ graph,\n\ if\ both\ vertices\ exist,\ else\ the\ graph\ is\ not\ changed.\n\ \n\ @param\ the\ origin\ of\ the\ edge\ to\ be\ removed\ from\ this\ graph\n\ @param\ the\ destination\ of\ the\ edge\ to\ be\ removed\ from\ this\ graph\n\ \n
comment18.params=vertex
comment18.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment18.text=\ \n\ Return\ all\ the\ vertices,\ in\ this\ graph,\ adjacent\ to\ the\ given\ \n\ vertex.\n\ \n\ @param\ A\ vertex\ in\ the\ graph\ whose\ successors\ will\ be\ returned.\n\ @return\ A\ LinkedList\ containing\ all\ the\ vertices\ x\ in\ the\ graph,\n\ for\ which\ an\ arc\ exists\ from\ the\ given\ vertex\ to\ x\ (vertex\ ->\ x).\n\n
comment19.params=vertex
comment19.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment19.text=\ \n\ Return\ all\ the\ vertices\ x,\ in\ this\ graph,\ that\ precede\ a\ given\n\ vertex.\n\ \n\ @param\ A\ vertex\ in\ the\ graph\ whose\ predecessors\ will\ be\ returned.\n\ @return\ LinkedList\ containing\ all\ the\ vertices\ x\ in\ the\ graph,\n\ for\ which\ an\ arc\ exists\ from\ x\ to\ the\ given\ vertex\ (x\ ->\ vertex).\n\ \n
comment2.params=startVertex
comment2.target=java.util.LinkedList\ BFS(java.lang.Object)
comment2.text=\ \n\ Conducts\ a\ Breadth-First\ Search.\ Never\ visists\ a\ vertex\ more\ than\ once\n\ \n\ @param\ startVertex\ -\ vertex\ that\ the\ BFS\ will\ begin\ on\ \n
comment20.params=tgf_file_name
comment20.target=void\ saveToTGF(java.lang.String)
comment20.text=\ \n\ Writes\ this\ graph\ into\ a\ file\ in\ the\ TGF\ format.\n\ \n\ @param\ the\ name\ of\ the\ file\ where\ this\ graph\ will\ be\ written\ \n\ in\ the\ TGF\ format.\n
comment21.params=
comment21.target=java.lang.String\ toString()
comment21.text=\ \n\ Returns\ a\ string\ representation\ of\ this\ graph,\ containing\ its\ \n\ vertices\ and\ arcs\n\ \n\ @return\ String\ \n
comment22.params=args
comment22.target=void\ main(java.lang.String[])
comment22.text=\ \n\ Main\ method\ for\ Testing\n\ \n\ @return\ String\ \n
comment3.params=origin\ destination
comment3.target=java.util.LinkedList\ BFSFind(java.lang.Object,\ java.lang.Object)
comment3.text=\ \n\ Conducts\ a\ Breadth-First\ Search\ to\ find\ a\ given\ vertex.\ Never\ visists\ a\ vertex\ more\ than\ once\n\ \n\ @param\ startVertex\ -\ vertex\ that\ the\ BFS\ will\ begin\ on\ \n
comment4.params=startVertex
comment4.target=java.util.LinkedList\ DFS(java.lang.Object)
comment4.text=\ \n\ Conducts\ a\ Depth-First\ Search\ by\ visiting\ all\ the\ vertices\ that\ it\ \n\ can\ reach\ starting\ at\ some\ vertex.\ Never\ visists\ a\ vertex\ more\ than\ once\n\ \n\ @param\ startVertex\n
comment5.params=
comment5.target=java.util.Vector\ getVertices()
comment5.text=\ \n\ Getter\ for\ Vector\ that\ contains\ all\ vertices\n\ \n\ @return\ vertices\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\ \n\ Returns\ a\ boolean\ indicating\ whether\ this\ graph\ is\ empty.\n\ A\ graph\ is\ empty\ when\ it\ contains\ no\ vertices\n\ \ \n\ @return\ true\ if\ this\ graph\ is\ empty,\ false\ otherwise.\n
comment7.params=
comment7.target=int\ getNumVertices()
comment7.text=\ \n\ Getter\ for\ number\ of\ vertices\ in\ the\ graph\n\ \n\ @return\ the\ number\ of\ vertices\ in\ this\ graph\n
comment8.params=
comment8.target=int\ getNumArcs()
comment8.text=\ \n\ Getter\ for\ number\ of\ arcs\ in\ graph\n\ \n\ @return\ ret\ the\ number\ of\ arcs\ in\ this\ graph\n
comment9.params=vertex1\ vertex2
comment9.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment9.text=\ \n\ Determines\ if\ an\ arc\ (direct\ connection)\ exists\ between\ the\ \n\ first\ and\ second\ vertex.\ \n\n\ @return\ true\ or\ false\n
numComments=23
